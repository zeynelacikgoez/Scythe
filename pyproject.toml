[build-system]
# Diese Angaben regeln, wie dein Paket gebaut wird
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scythe"                 # Name deines Pakets
version = "0.1.0"               # Bitte anpassen (z. B. Semantic Versioning)
description = "Agent-based Simulation & Plan-Optimizer Framework"
readme = "README.md"            # Wird als Langbeschreibung genommen
license = "MIT"                 # Lizenz (entsprechend deiner LICENSE)
authors = [
  { name="Dein Name", email="dein@example.com" }
]
keywords = ["agent-based simulation", "optimizer", "hyperbolic", "sdm", "machine learning"]
requires-python = ">=3.8"

# Hier kannst du Abhängigkeiten definieren:
dependencies = [
  "mesa>=1.2.0",
  "numpy>=1.19.0",
  "pandas>=1.1.0",
  "torch>=1.8.0",
  "geoopt>=0.5.0",
  # ggf. mehr wie "pytest" oder "requests" etc.
]

classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: OS Independent",
  # Ggf. weitere Classifiers
]

# Optionale Links (Doku, Repo etc.)
[project.urls]
"Source Code" = "https://github.com/zeynelacikgoez/Scythe"
"Documentation" = "https://example.com/scythe-docs"

# Entry Point: Ermöglicht 'python -m scythe' ODER 'scythe' als CLI.
# Variante 1: "python -m scythe" greift automatisch auf __main__.py zu.
# Variante 2 (console_scripts): 
#   scythe => scythe.__main__:main
[project.scripts]
scythe = "scythe.__main__:main"

[tool.setuptools]
# Falls du möchtest, kannst du hier noch Konfigurationen zur Paketsuche angeben.
# z. B. falls du einen "src/"-Layout verwendest.
# package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = "."
exclude = ["tests*"]

